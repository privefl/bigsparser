// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getXPtrSFBM
SEXP getXPtrSFBM(std::string path, std::size_t n, std::size_t m, std::vector<int> p);
RcppExport SEXP _bigsparser_getXPtrSFBM(SEXP pathSEXP, SEXP nSEXP, SEXP mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type m(mSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(getXPtrSFBM(path, n, m, p));
    return rcpp_result_gen;
END_RCPP
}
// write_indval
void write_indval(const char * filename, const IntegerVector& i, const NumericVector& x);
RcppExport SEXP _bigsparser_write_indval(SEXP filenameSEXP, SEXP iSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    write_indval(filename, i, x);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bigsparser_getXPtrSFBM", (DL_FUNC) &_bigsparser_getXPtrSFBM, 4},
    {"_bigsparser_write_indval", (DL_FUNC) &_bigsparser_write_indval, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_bigsparser(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
